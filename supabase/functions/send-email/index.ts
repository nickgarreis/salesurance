// /Users/nick/NiCode GmbH/Salesurance/supabase/functions/send-email/index.ts
// Edge function to send scheduled outreach emails with DSGVO compliance
// Processes messages with status='scheduled' and due time <= now, sends via Resend API
// RELEVANT FILES: messages table schema, campaigns table, receive-emails/index.ts, handle-unsubscribe/index.ts

import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { Resend } from 'npm:resend@4.0.0'

// Helper function to generate RFC-compliant Message-ID
function generateMessageId(domain: string): string {
  // Generate UUID-like string for unique message identification
  const timestamp = Date.now()
  const random = Math.random().toString(36).substring(2, 15)
  return `<${timestamp}-${random}@${domain}>`
}

// Helper function to generate thread ID for conversation grouping
function generateThreadId(leadId: string, campaignId: string): string {
  return `thread-${leadId}-${campaignId}`
}

const resend = new Resend(Deno.env.get('RESEND_API_KEY')!)
const supabaseUrl = Deno.env.get('SUPABASE_URL')!
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!

// Create Supabase client with service role key for database operations
const supabase = createClient(supabaseUrl, supabaseServiceKey)

// Hardcoded DSGVO footer for all outreach emails
const DSGVO_FOOTER = `
<hr style="margin: 30px 0; border: none; border-top: 1px solid #e0e0e0;">
<p style="font-size: 12px; color: #666; margin-bottom: 10px;">
  <strong>DSGVO/GDPR Compliance:</strong> You are receiving this email because we believe it may be of interest to your business. 
  If you no longer wish to receive emails from us, please click the unsubscribe link below.
</p>
<p style="font-size: 12px; color: #666;">
  <a href="{{UNSUBSCRIBE_URL}}" style="color: #007cba;">Unsubscribe from all future communications</a>
</p>
`

Deno.serve(async (req) => {
  try {
    console.log('Starting send-email function execution')
    
    // Query messages that are due to be sent using database function
    // This function returns all scheduled messages with joined lead and campaign data
    // Using RPC to avoid complex join issues in edge function environment
    const { data: dueMessages, error: queryError } = await supabase
      .rpc('get_due_messages')
    
    if (queryError) {
      console.error('Error querying due messages:', queryError)
      return new Response(JSON.stringify({ error: 'Database query failed' }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      })
    }

    if (!dueMessages || dueMessages.length === 0) {
      console.log('No due messages found')
      return new Response(JSON.stringify({ message: 'No messages to send' }), {
        status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
    }

    console.log(`Found ${dueMessages.length} due messages to send`)
    
    const results = []
    
    // Process each due message
    for (const msg of dueMessages) {
      try {
        // Use Resend's built-in unsubscribe functionality
        // The unsubscribe URL will be automatically generated by Resend when List-Unsubscribe header is provided
        const unsubscribeUrl = `https://unsubscribe.resend.com/unsubscribe?campaign_id=${msg.campaign_id}&company_website=${encodeURIComponent(msg.lead_company_website || '')}`
        
        // Add DSGVO footer to message content only if lead status is 'active'
        let emailContent = msg.message
        if (msg.lead_status === 'active') {
          emailContent = `${msg.message}\n\n${DSGVO_FOOTER.replace('{{UNSUBSCRIBE_URL}}', unsubscribeUrl)}`
        }
        
        // Extract domain from campaign email for Message-ID generation
        const senderDomain = msg.campaign_email.split('@')[1] || 'example.com'
        
        // Generate RFC-compliant Message-ID for email threading
        const messageId = generateMessageId(senderDomain)
        
        // Generate thread ID for conversation grouping
        const threadId = generateThreadId(msg.lead_id, msg.campaign_id)
        
        // Send email via Resend with Message-ID and unsubscribe headers
        // Using campaign email as sender instead of message sender field
        const { data: emailResult, error: emailError } = await resend.emails.send({
          from: msg.campaign_email,
          to: [msg.lead_email],
          subject: msg.subject || 'Outreach Message',
          html: emailContent,
          headers: {
            'Message-ID': messageId,
            'List-Unsubscribe': `<${unsubscribeUrl}>`,
            'List-Unsubscribe-Post': 'List-Unsubscribe=One-Click'
          }
        })

        if (emailError) {
          console.error(`Failed to send email for message ${msg.id}:`, emailError)
          results.push({
            message_id: msg.id,
            status: 'failed',
            error: emailError.message
          })
          continue
        }

        // Create email thread data for conversation tracking
        const emailThreadData = {
          message_id: messageId,
          thread_id: threadId,
          parent_message_id: null, // This is the first message in the thread
          references: [] // Empty for initial message, will be populated in follow-ups
        }
        
        // Update message status to 'sent' in database and store threading data
        const { error: updateError } = await supabase
          .from('messages')
          .update({
            status: 'sent',
            sent_at: new Date().toISOString(),
            resend_email_id: emailResult?.id,
            email_thread_data: emailThreadData,
            email_events: { sent: { timestamp: new Date().toISOString() } }
          })
          .eq('id', msg.id)

        if (updateError) {
          console.error(`Failed to update message ${msg.id} status:`, updateError)
          results.push({
            message_id: msg.id,
            status: 'sent_but_not_updated',
            email_id: emailResult?.id
          })
        } else {
          console.log(`Successfully sent and updated message ${msg.id}`)
          results.push({
            message_id: msg.id,
            status: 'sent',
            email_id: emailResult?.id
          })
        }

      } catch (error) {
        console.error(`Error processing message ${msg.id}:`, error)
        results.push({
          message_id: msg.id,
          status: 'failed',
          error: error.message
        })
      }
    }

    console.log(`Completed processing. Results:`, results)
    
    return new Response(JSON.stringify({
      message: `Processed ${dueMessages.length} messages`,
      results: results
    }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    })

  } catch (error) {
    console.error('Unexpected error in send-email function:', error)
    return new Response(JSON.stringify({ 
      error: 'Internal server error',
      details: error.message 
    }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    })
  }
})